[versions]

# Commons
kotlin = "2.0.21"
kotlinComposePlugin = "2.0.21"
json = "20231013"
okHttp = "4.12.0"
composeBom = "2024.04.01"
activityCompose = "1.9.3"
androidXComposeNavigation = "2.8.8"

# Android
androidToolsPlugin = "8.9.0"

# AndroidX
androidx-core = "1.3.2"
androidx-appcompat = "1.2.0"
androidx-constraintlayout = "2.0.4"

# JUnit 4
jUnit4 = "4.13.2"

# JUnit 5
jUnit-jupiter = "5.9.3"
jUnit-vintage = "5.9.3"
jUnit-platform = "1.9.3"
jUnit-mockitoExt = "5.4.0"

# Tests Tools
assertJ = "3.18.1"
elmyr = "1.3.1"
mockitoKotlin = "5.0.0"

# Tools
dokka = "2.0.0"
unmock = "0.7.5"

fuzzyWuzzy = "1.2.0"

versionsPluginGradle = "0.33.0"

kotlinGrammarParser = "c35b50fa44"

# Datadog
datadogSdk = "2.15.2"
datadogSdkSnapshot = "2.22.0-SNAPSHOT"
datadogPluginGradle = "1.16.0"

# Kotlin Compiler Plugin
kotlinCompilerEmbeddable = "2.0.21"
kotlinCompilerTesting = "0.7.0"
autoService = "1.0.1"
junitVersion = "1.2.1"
espressoCoreVersion = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"

[libraries]

# Classpaths
# Gradle version catalog doesn't allow names to end with plugin, that is why strange names
androidToolsPluginGradle = { module = "com.android.tools.build:gradle", version.ref = "androidToolsPlugin" }
kotlinPluginGradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
dokkaPluginGradle = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
unmockPluginGradle = { module = "de.mobilej.unmock:UnMockPlugin", version.ref = "unmock" }

versionsPluginGradle = { module = "com.github.ben-manes:gradle-versions-plugin", version.ref = "versionsPluginGradle" }

kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }

okHttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
json = { module = "org.json:json", version.ref = "json" }

# AndroidX

androidx-core = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }
androidx-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidx-constraintlayout" }

assertJ = { module = "org.assertj:assertj-core", version.ref = "assertJ" }

# JUnit 4
jUnit4 = { module = "junit:junit", version.ref = "jUnit4" }

# JUnit 5
jUnit-platform = { module = "org.junit.platform:junit-platform-launcher", version.ref = "jUnit-platform" }
jUnit-jupiterApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jUnit-jupiter" }
jUnit-parameters = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "jUnit-jupiter" }
jUnit-jupiterEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jUnit-jupiter" }
jUnit-vintage = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "jUnit-vintage" }
jUnit-mockitoExt = { module = "org.mockito:mockito-junit-jupiter", version.ref = "jUnit-mockitoExt" }

# Test tools
elmyr-core = { module = "com.github.xgouchet.Elmyr:core", version.ref = "elmyr" }
elmyr-inject = { module = "com.github.xgouchet.Elmyr:inject", version.ref = "elmyr" }
elmyr-jUnit4 = { module = "com.github.xgouchet.Elmyr:junit4", version.ref = "elmyr" }
elmyr-jUnit5 = { module = "com.github.xgouchet.Elmyr:junit5", version.ref = "elmyr" }
elmyr-jvm = { module = "com.github.xgouchet.Elmyr:jvm", version.ref = "elmyr" }
mockitoKotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

# Tools
okHttpMock = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }

fuzzyWuzzy = { module = "me.xdrop:fuzzywuzzy", version.ref = "fuzzyWuzzy" }

# Datadog
datadogSdkRum = { module = "com.datadoghq:dd-sdk-android-rum", version.ref = "datadogSdk" }
datadogSdkCompose = { module = "com.datadoghq:dd-sdk-android-compose", version.ref = "datadogSdk" }
datadogPluginGradle = { module = "com.datadoghq:dd-sdk-android-gradle-plugin", version.ref = "datadogPluginGradle" }

# Datadog Snapshot
datadogSdkRumSnapshot = { module = "com.datadoghq:dd-sdk-android-rum", version.ref = "datadogSdkSnapshot" }
datadogSdkComposeSnapshot = { module = "com.datadoghq:dd-sdk-android-compose", version.ref = "datadogSdkSnapshot" }

# Kotlin Compiler Plugin
kotlinCompilerEmbeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable", version.ref = "kotlinCompilerEmbeddable" }
kotlinCompilerTesting = { module = "dev.zacsweers.kctfork:core", version.ref = "kotlinCompilerTesting" }
autoService = { module = "com.google.auto.service:auto-service", version.ref = "autoService" }
autoServiceAnnotation = { module = "com.google.auto.service:auto-service-annotations", version.ref = "autoService" }

# Compose
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCoreVersion" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-compose-navigation = { module = "androidx.navigation:navigation-compose", version.ref = "androidXComposeNavigation" }

[bundles]

jUnit5 = [
    "jUnit-platform",
    "jUnit-jupiterApi",
    "jUnit-jupiterEngine",
    "jUnit-vintage",
    "jUnit-mockitoExt",
    "jUnit-parameters"
]

testTools = [
    "assertJ",
    "elmyr-core",
    "elmyr-inject",
    "elmyr-jUnit5",
    "elmyr-jvm",
    "mockitoKotlin",
    "kotlinReflect"
]

[plugins]
versionsPluginGradle = { id = "com.github.ben-manes.versions", version.ref = "versionsPluginGradle" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlinComposePlugin" }
